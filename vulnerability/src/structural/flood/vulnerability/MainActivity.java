package structural.flood.vulnerability;

import android.support.v7.app.ActionBarActivity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.view.View;
import android.widget.AdapterView.OnItemSelectedListener;

public class MainActivity extends ActionBarActivity {
	
	private static final String WALL_INDICATOR = "15";
	private static final String FOUNDATION_INDICATOR = "10";
	private static final String HEIGHT_FIRST_FLOOR_INDICATOR = "5";
	private static final String FLOOR_NUMBERS_INDICATOR = "5";
	private static final String DOORS_INDICATOR = "1";
	private static final String WINDOWS_INDICATOR = "1";		
	private Spinner spinnerWall;
	private Spinner spinnerFoundation;
	private Spinner spinnerHeightFirstFloor;
	private Spinner spinnerFloorNumbers;
	private Spinner spinnerDoors;
	private Spinner spinnerWindows;
    private TextView txtResults;
	private TextView txtResultsValue;	
	final Context mContext = this;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        String[] indicatorsDegree = getResources().getStringArray(R.array.degreeIndicators);
        spinnerWall = (Spinner) findViewById(R.id.spinnerWallIndicator);
        spinnerFoundation = (Spinner) findViewById(R.id.spinnerFoundationIndicator);
        spinnerHeightFirstFloor = (Spinner) findViewById(R.id.spinnerHeightFirstFloor);
        spinnerFloorNumbers = (Spinner) findViewById(R.id.spinnerFloorNumbers);
        spinnerDoors = (Spinner) findViewById(R.id.spinnerDoorsIndicator);
        spinnerWindows = (Spinner) findViewById(R.id.spinnerWindowsIndicator);        
        txtResults = (TextView) findViewById(R.id.results);        
        txtResultsValue = (TextView) findViewById(R.id.resultsValue);        
        // action bar background color
        Drawable d=getResources().getDrawable(R.drawable.actionbar_background);  
        getSupportActionBar().setBackgroundDrawable(d);
        // custom fonts 
        TextView txt = (TextView) findViewById(R.id.textView1);
        Typeface font = Typeface.createFromAsset(getAssets(),"fonts/Capture_it.ttf");
        txt.setTypeface(font);		
        
        // spinner for Wall indicator
        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, indicatorsDegree);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinnerWall.setAdapter(dataAdapter);
 
		spinnerWall.setOnItemSelectedListener(new OnItemSelectedListener() {
 
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
				
			}
 
			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
 
			}
		});
		//spinner for Foundation indicator
		ArrayAdapter<String> dataAdapter1 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, indicatorsDegree);
		dataAdapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinnerFoundation.setAdapter(dataAdapter1);
 
		spinnerFoundation.setOnItemSelectedListener(new OnItemSelectedListener() {
 
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

			}
 
			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
 
			}
		});
        // spinner for Height of the First Floor indicator
		ArrayAdapter<String> dataAdapter2 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, indicatorsDegree);
		dataAdapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinnerHeightFirstFloor.setAdapter(dataAdapter2);
 
		spinnerHeightFirstFloor.setOnItemSelectedListener(new OnItemSelectedListener() {
 
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

			}
 
			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
 
			}
		});
        // spinner Floor Numbers indicator
		ArrayAdapter<String> dataAdapter3 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, indicatorsDegree);
		dataAdapter3.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinnerFloorNumbers.setAdapter(dataAdapter3);
 
		spinnerFloorNumbers.setOnItemSelectedListener(new OnItemSelectedListener() {
 
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

			}
 
			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
 
			}
		});
		// spinner Doors indicator
		ArrayAdapter<String> dataAdapter4 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, indicatorsDegree);
		dataAdapter4.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinnerDoors.setAdapter(dataAdapter4);
 
		spinnerDoors.setOnItemSelectedListener(new OnItemSelectedListener() {
 
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

			}
 
			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
 
			}
		});
		// spinner Windows indicator
		ArrayAdapter<String> dataAdapter5 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, indicatorsDegree);
		dataAdapter5.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinnerWindows.setAdapter(dataAdapter5);
 
		spinnerWindows.setOnItemSelectedListener(new OnItemSelectedListener() {
 
			@Override
			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {

			}
 
			@Override
			public void onNothingSelected(AdapterView<?> arg0) {
 
			}
		});
	}    

	public void infoWall(View view) {              
    	 	
		AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
		   builder.setIcon(R.drawable.attention); 
		   builder.setMessage(R.string.explanationWall);
		   builder.setTitle(R.string.headlineWall);		  	   
		   builder.setPositiveButton(R.string.exit, new DialogInterface.OnClickListener() {
					  public void onClick(DialogInterface dialog, int id) {       		       	  	            	
		        	  }
				  });  			
		   AlertDialog dbu = builder.create(); 			 
		   dbu.show(); {
		   }
	}
	
	public void infoFoundation(View view) {              
	 	
		AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
		   builder.setIcon(R.drawable.attention); 
		   builder.setMessage(R.string.explanationFoundation);
		   builder.setTitle(R.string.headlineFoundation);
		   builder.setPositiveButton(R.string.exit, new DialogInterface.OnClickListener() {
					  public void onClick(DialogInterface dialog, int id) {       		       	  	            	
		        	  }
				  });  			
		   AlertDialog dbu = builder.create(); 			 
		   dbu.show(); {
		   }
	}
	
    public void infoHeight(View view) {              
	 	
		AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
		   builder.setIcon(R.drawable.attention); 
		   builder.setMessage(R.string.explanationHeight);
		   builder.setTitle(R.string.headlineHeight);
		   builder.setPositiveButton(R.string.exit, new DialogInterface.OnClickListener() {
					  public void onClick(DialogInterface dialog, int id) {       		       	  	            	
		        	  }
				  });  			
		   AlertDialog dbu = builder.create(); 			 
		   dbu.show(); {
		   }
	}
	
    public void infoFloorNumbers(View view) {              
	 	
		AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
		   builder.setIcon(R.drawable.attention); 
		   builder.setMessage(R.string.explanationFloorNumbers);
		   builder.setTitle(R.string.headlineFloorNumbers);
		   builder.setPositiveButton(R.string.exit, new DialogInterface.OnClickListener() {
					  public void onClick(DialogInterface dialog, int id) {       		       	  	            	
		        	  }
				  });  			
		   AlertDialog dbu = builder.create(); 			 
		   dbu.show(); {
		   }
	}
	
    public void infoDoors(View view) {              
	 	
		AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
		   builder.setIcon(R.drawable.attention); 
		   builder.setMessage(R.string.explanationDoors);
		   builder.setTitle(R.string.headlineDoors);
		   builder.setPositiveButton(R.string.exit, new DialogInterface.OnClickListener() {
					  public void onClick(DialogInterface dialog, int id) {       		       	  	            	
		        	  }
				  });  			
		   AlertDialog dbu = builder.create(); 			 
		   dbu.show(); {
		   }
	}
	
    public void infoWindows(View view) {              
	 	
		AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
		   builder.setIcon(R.drawable.attention); 
		   builder.setMessage(R.string.explanationWindows);
		   builder.setTitle(R.string.headlineWindows);
		   builder.setPositiveButton(R.string.exit, new DialogInterface.OnClickListener() {
					  public void onClick(DialogInterface dialog, int id) {       		       	  	            	
		        	  }
				  });  			
		   AlertDialog dbu = builder.create(); 			 
		   dbu.show(); {
		   }
	}
    
    public void calculateVulnerability(View view) {        
   
    	Toast.makeText(getApplicationContext(),R.string.confirmation, Toast.LENGTH_SHORT).show();
    	
        if (view.getId() == R.id.imageView1) {
        	
        	 float wall = Float.parseFloat(spinnerWall.getSelectedItem().toString());
             float foundation = Float.parseFloat(spinnerFoundation.getSelectedItem().toString());
             float heightFirstFloor = Float.parseFloat(spinnerHeightFirstFloor.getSelectedItem().toString());
             float floorNumbers = Float.parseFloat(spinnerFloorNumbers.getSelectedItem().toString());
             float doors = Float.parseFloat(spinnerDoors.getSelectedItem().toString());
             float windows = Float.parseFloat(spinnerWindows.getSelectedItem().toString());                          
             float valueWall = Float.parseFloat(WALL_INDICATOR);
             float valueFoundation = Float.parseFloat(FOUNDATION_INDICATOR);
             float valueHeightFirstFloor = Float.parseFloat(HEIGHT_FIRST_FLOOR_INDICATOR);
             float valueFloorNumbers = Float.parseFloat(FLOOR_NUMBERS_INDICATOR);
             float valueDoors = Float.parseFloat(DOORS_INDICATOR);
             float valueWindows = Float.parseFloat(WINDOWS_INDICATOR);
             
             float vulnerabilityValue = calculateVulnerability (wall, foundation, heightFirstFloor, floorNumbers, doors, windows, valueWall, valueFoundation, valueHeightFirstFloor,
            		                                            valueFloorNumbers, valueDoors, valueWindows);
             txtResultsValue.setText(vulnerabilityValue + "");
             
             int vulnerabilityInterpretation = interpretVulnerability (vulnerabilityValue);             
             txtResults.setText(getResources().getString(vulnerabilityInterpretation));
             
             int vulnerabilityColor = colorVulnerability(vulnerabilityValue);
             txtResultsValue.setTextColor(getResources().getColor(vulnerabilityColor));
             txtResults.setTextColor(getResources().getColor(vulnerabilityColor));
        }
    }
    
    private float calculateVulnerability (float wall, float foundation, float heightFirstFloor, float floorNumbers, float doors, float windows, float valueWall, 
    		                               float valueFoundation, float valueHeightFirstFloor, float valueFloorNumbers, float valueDoors, float valueWindows) {

        return (wall*valueWall + foundation*valueFoundation + heightFirstFloor*valueHeightFirstFloor + floorNumbers*valueFloorNumbers + doors*valueDoors + windows*valueWindows);
    
    }
    
    private int interpretVulnerability(float vulnerabilityValue) {

        if (vulnerabilityValue <= 80) {
         return R.string.lowVulnerability;        
       
         
        } else if (vulnerabilityValue >= 131 ) {
         return R.string.highVulnerability;
         
        } else {
            return R.string.mediumVulnerability;
           }
    }
    
    private int colorVulnerability(float vulnerabilityValue) {

        if (vulnerabilityValue <= 80) {
         return R.color.colorGreen;      
       
         
        } else if (vulnerabilityValue >= 131 ) {
            return R.color.colorRed;
         
        } else {
            return R.color.colorOrange;
           }
    }   

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        
    	 switch (item.getItemId()) {
         
         case R.id.action_settings:
         	Intent aa = new Intent(android.provider.Settings.ACTION_SETTINGS);
         	startActivityForResult(aa,0);
         	break;
         case R.id.model:
         	Intent em = new Intent(getApplicationContext(),AboutModelActivity.class);
         	startActivityForResult(em,0);
         	break;
         case R.id.license:
          	Intent el = new Intent(getApplicationContext(),LicenseActivity.class);
          	startActivityForResult(el,0);
          	break;
 	default:
             return super.onOptionsItemSelected(item);
     }
 	return true;                 

  }

 }
